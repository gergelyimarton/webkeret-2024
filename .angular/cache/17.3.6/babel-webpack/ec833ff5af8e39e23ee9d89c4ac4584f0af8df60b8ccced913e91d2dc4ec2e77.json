{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet MeterService = class MeterService {\n  constructor(afs) {\n    this.afs = afs;\n    this.collectionName = 'Meters';\n  }\n  create(meter) {\n    meter.id = this.afs.createId();\n    return this.afs.collection(this.collectionName).doc(meter.id).set(meter);\n  }\n  getAll() {\n    return this.afs.collection(this.collectionName).valueChanges();\n  }\n  getById(id) {\n    return this.afs.collection(this.collectionName).doc(id).valueChanges();\n  }\n  getMetersByUserId(userId) {\n    return this.afs.collection(this.collectionName, ref => ref.where('user_id', '==', userId).orderBy('name', 'asc')).valueChanges();\n  }\n  updateCurrent(meterId, newCurrent) {\n    return this.afs.collection(this.collectionName).doc(meterId).update({\n      current: newCurrent\n    });\n  }\n};\nMeterService = __decorate([Injectable({\n  providedIn: 'root'\n})], MeterService);\nexport { MeterService };","map":{"version":3,"names":["Injectable","MeterService","constructor","afs","collectionName","create","meter","id","createId","collection","doc","set","getAll","valueChanges","getById","getMetersByUserId","userId","ref","where","orderBy","updateCurrent","meterId","newCurrent","update","current","__decorate","providedIn"],"sources":["/Users/germar/webkeret-2024/src/app/shared/services/meter.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { Meter } from '../models/Meter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MeterService {\n\n  collectionName = 'Meters';\n\n  constructor(private afs: AngularFirestore) { }\n\n  create(meter: Meter) {\n    meter.id = this.afs.createId();\n    return this.afs.collection<Meter>(this.collectionName).doc(meter.id).set(meter);\n  }\n\n  getAll() {\n    return this.afs.collection<Meter>(this.collectionName).valueChanges();\n  }\n\n  getById(id:string) {\n    return this.afs.collection<Meter>(this.collectionName).doc(id).valueChanges();\n  }\n\n  getMetersByUserId(userId: string) {\n    return this.afs.collection<Meter>(this.collectionName, ref => ref.where('user_id', '==', userId).orderBy('name', 'asc')).valueChanges();\n\n  }\n\n  updateCurrent(meterId: string, newCurrent: number) {\n    return this.afs.collection<Meter>(this.collectionName).doc(meterId).update({current: newCurrent});\n  }\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAOnC,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAIvBC,YAAoBC,GAAqB;IAArB,KAAAA,GAAG,GAAHA,GAAG;IAFvB,KAAAC,cAAc,GAAG,QAAQ;EAEoB;EAE7CC,MAAMA,CAACC,KAAY;IACjBA,KAAK,CAACC,EAAE,GAAG,IAAI,CAACJ,GAAG,CAACK,QAAQ,EAAE;IAC9B,OAAO,IAAI,CAACL,GAAG,CAACM,UAAU,CAAQ,IAAI,CAACL,cAAc,CAAC,CAACM,GAAG,CAACJ,KAAK,CAACC,EAAE,CAAC,CAACI,GAAG,CAACL,KAAK,CAAC;EACjF;EAEAM,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACT,GAAG,CAACM,UAAU,CAAQ,IAAI,CAACL,cAAc,CAAC,CAACS,YAAY,EAAE;EACvE;EAEAC,OAAOA,CAACP,EAAS;IACf,OAAO,IAAI,CAACJ,GAAG,CAACM,UAAU,CAAQ,IAAI,CAACL,cAAc,CAAC,CAACM,GAAG,CAACH,EAAE,CAAC,CAACM,YAAY,EAAE;EAC/E;EAEAE,iBAAiBA,CAACC,MAAc;IAC9B,OAAO,IAAI,CAACb,GAAG,CAACM,UAAU,CAAQ,IAAI,CAACL,cAAc,EAAEa,GAAG,IAAIA,GAAG,CAACC,KAAK,CAAC,SAAS,EAAE,IAAI,EAAEF,MAAM,CAAC,CAACG,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAACN,YAAY,EAAE;EAEzI;EAEAO,aAAaA,CAACC,OAAe,EAAEC,UAAkB;IAC/C,OAAO,IAAI,CAACnB,GAAG,CAACM,UAAU,CAAQ,IAAI,CAACL,cAAc,CAAC,CAACM,GAAG,CAACW,OAAO,CAAC,CAACE,MAAM,CAAC;MAACC,OAAO,EAAEF;IAAU,CAAC,CAAC;EACnG;CACD;AA3BYrB,YAAY,GAAAwB,UAAA,EAHxBzB,UAAU,CAAC;EACV0B,UAAU,EAAE;CACb,CAAC,C,EACWzB,YAAY,CA2BxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}