{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../shared/services/meter.service\";\nimport * as i2 from \"../../../shared/services/user.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/material/core\";\nfunction ListComponent_mat_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const obj_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", obj_r1);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(obj_r1.name);\n  }\n}\nexport let ListComponent = /*#__PURE__*/(() => {\n  class ListComponent {\n    constructor(meterService, userService) {\n      this.meterService = meterService;\n      this.userService = userService;\n      this.meterInput = [];\n      this.meterEmitter = new EventEmitter();\n    }\n    ngOnInit() {\n      const user = JSON.parse(localStorage.getItem('user'));\n      this.userService.getById(user.uid).subscribe(data => {\n        this.user = data;\n        this.meterService.getMetersByUserId(this.user?.id).subscribe(meters => {\n          this.meterInput = meters;\n        }, error => {\n          console.error(error);\n        });\n      }, error => {\n        console.error(error);\n      });\n      this.chosenGasmeter = this.meterInput[0];\n      this.reload();\n    }\n    ngOnChanges() {\n      if (this.meterInput) {\n        this.chosenGasmeter = this.meterInput[0];\n        this.reload();\n      }\n    }\n    reload() {\n      this.meterEmitter.emit(this.chosenGasmeter);\n    }\n    static #_ = this.ɵfac = function ListComponent_Factory(t) {\n      return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.MeterService), i0.ɵɵdirectiveInject(i2.UserService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ListComponent,\n      selectors: [[\"meter-list\"]],\n      outputs: {\n        meterEmitter: \"meterEmitter\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 4,\n      vars: 2,\n      consts: [[1, \"meterList\"], [\"appearance\", \"fill\"], [3, \"selectionChange\", \"ngModelChange\", \"ngModel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n      template: function ListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-form-field\", 1)(2, \"mat-select\", 2);\n          i0.ɵɵlistener(\"selectionChange\", function ListComponent_Template_mat_select_selectionChange_2_listener() {\n            return ctx.reload();\n          });\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ListComponent_Template_mat_select_ngModelChange_2_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.chosenGasmeter, $event) || (ctx.chosenGasmeter = $event);\n            return $event;\n          });\n          i0.ɵɵtemplate(3, ListComponent_mat_option_3_Template, 2, 2, \"mat-option\", 3);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.chosenGasmeter);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", ctx.meterInput);\n        }\n      },\n      dependencies: [i3.NgForOf, i4.NgControlStatus, i4.NgModel, i5.MatFormField, i6.MatSelect, i7.MatOption]\n    });\n  }\n  return ListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}