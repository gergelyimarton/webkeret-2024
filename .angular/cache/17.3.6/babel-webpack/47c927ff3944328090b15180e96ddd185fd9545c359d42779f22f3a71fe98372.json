{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DateFormatPipe {\n  transform(value, ...args) {\n    let tzoffset = new Date(value).getTimezoneOffset() * 6000;\n    let minOffset = new Date(value).getTime() - tzoffset;\n    let localISOTime = new Date(minOffset).toLocaleDateString().replace('Z', '').replace('T', '');\n    return localISOTime;\n  }\n  static #_ = this.ɵfac = function DateFormatPipe_Factory(t) {\n    return new (t || DateFormatPipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"dateFormat\",\n    type: DateFormatPipe,\n    pure: true\n  });\n}","map":{"version":3,"names":["DateFormatPipe","transform","value","args","tzoffset","Date","getTimezoneOffset","minOffset","getTime","localISOTime","toLocaleDateString","replace","_","_2","pure"],"sources":["/Users/germar/webkeret-2024/src/app/shared/pipes/date-format.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'dateFormat'\n})\nexport class DateFormatPipe implements PipeTransform {\n\n  transform(value: number, ...args: unknown[]): string {\n    let tzoffset = (new Date(value)).getTimezoneOffset() * 6000;\n    let minOffset = new Date(value).getTime() - tzoffset;\n    let localISOTime = (new Date(minOffset)).toLocaleDateString().replace('Z', '').replace('T', '');\n    return localISOTime;\n  }\n\n}\n"],"mappings":";AAKA,OAAM,MAAOA,cAAc;EAEzBC,SAASA,CAACC,KAAa,EAAE,GAAGC,IAAe;IACzC,IAAIC,QAAQ,GAAI,IAAIC,IAAI,CAACH,KAAK,CAAC,CAAEI,iBAAiB,EAAE,GAAG,IAAI;IAC3D,IAAIC,SAAS,GAAG,IAAIF,IAAI,CAACH,KAAK,CAAC,CAACM,OAAO,EAAE,GAAGJ,QAAQ;IACpD,IAAIK,YAAY,GAAI,IAAIJ,IAAI,CAACE,SAAS,CAAC,CAAEG,kBAAkB,EAAE,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IAC/F,OAAOF,YAAY;EACrB;EAAC,QAAAG,CAAA,G;qBAPUZ,cAAc;EAAA;EAAA,QAAAa,EAAA,G;;UAAdb,cAAc;IAAAc,IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}