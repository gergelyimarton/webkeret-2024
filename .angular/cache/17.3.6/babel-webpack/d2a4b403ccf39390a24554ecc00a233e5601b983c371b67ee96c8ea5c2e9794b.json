{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../shared/services/meter.service\";\nimport * as i2 from \"../../../shared/services/user.service\";\nfunction ListComponent_mat_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const obj_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", obj_r1);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(obj_r1.name);\n  }\n}\nexport class ListComponent {\n  constructor(meterService, userService) {\n    this.meterService = meterService;\n    this.userService = userService;\n    this.meterInput = [];\n    this.meterEmitter = new EventEmitter();\n  }\n  ngOnInit() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    this.userService.getById(user.uid).subscribe(data => {\n      this.user = data;\n      this.meterService.getMetersByUserId(this.user?.id).subscribe(meters => {\n        this.meterInput = meters;\n      }, error => {\n        console.error(error);\n      });\n    }, error => {\n      console.error(error);\n    });\n    this.chosenGasmeter = this.meterInput[0];\n    this.reload();\n  }\n  ngOnChanges() {\n    if (this.meterInput) {\n      this.chosenGasmeter = this.meterInput[0];\n      this.reload();\n    }\n  }\n  reload() {\n    this.meterEmitter.emit(this.chosenGasmeter);\n  }\n  static #_ = this.ɵfac = function ListComponent_Factory(t) {\n    return new (t || ListComponent)(i0.ɵɵdirectiveInject(i1.MeterService), i0.ɵɵdirectiveInject(i2.UserService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListComponent,\n    selectors: [[\"meter-list\"]],\n    outputs: {\n      meterEmitter: \"meterEmitter\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"meterList\"], [\"appearance\", \"fill\"], [3, \"selectionChange\", \"ngModelChange\", \"ngModel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n    template: function ListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-form-field\", 1)(2, \"mat-select\", 2);\n        i0.ɵɵlistener(\"selectionChange\", function ListComponent_Template_mat_select_selectionChange_2_listener() {\n          return ctx.reload();\n        });\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function ListComponent_Template_mat_select_ngModelChange_2_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.chosenGasmeter, $event) || (ctx.chosenGasmeter = $event);\n          return $event;\n        });\n        i0.ɵɵtemplate(3, ListComponent_mat_option_3_Template, 2, 2, \"mat-option\", 3);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.chosenGasmeter);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngForOf\", ctx.meterInput);\n      }\n    },\n    styles: [\"\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\t\\\"use strict\\\";\\n\\n \\t\\n\\n \\t\\n\\n })()[_ngcontent-%COMP%]\\n;\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","obj_r1","ɵɵadvance","ɵɵtextInterpolate","name","ListComponent","constructor","meterService","userService","meterInput","meterEmitter","ngOnInit","user","JSON","parse","localStorage","getItem","getById","uid","subscribe","data","getMetersByUserId","id","meters","error","console","chosenGasmeter","reload","ngOnChanges","emit","_","ɵɵdirectiveInject","i1","MeterService","i2","UserService","_2","selectors","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","template","ListComponent_Template","rf","ctx","ɵɵlistener","ListComponent_Template_mat_select_selectionChange_2_listener","ɵɵtwoWayListener","ListComponent_Template_mat_select_ngModelChange_2_listener","$event","ɵɵtwoWayBindingSet","ɵɵtemplate","ListComponent_mat_option_3_Template","ɵɵtwoWayProperty"],"sources":["/Users/germar/webkeret-2024/src/app/pages/meter-reading/list/list.component.ts","/Users/germar/webkeret-2024/src/app/pages/meter-reading/list/list.component.html"],"sourcesContent":["import { Component, Output, OnInit, OnChanges, EventEmitter } from '@angular/core';\nimport { MeterService } from '../../../shared/services/meter.service';\nimport { UserService } from '../../../shared/services/user.service';\nimport { Meter } from '../../../shared/models/Meter';\nimport { User } from '../../../shared/models/User';\n\n@Component({\n  selector: 'meter-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit, OnChanges {\n\n  meterInput: Array<Meter> = [];\n  @Output() meterEmitter: EventEmitter<Meter> = new EventEmitter();\n  chosenGasmeter?: Meter;\n  user?: User;\n\n  constructor(private meterService: MeterService, private userService: UserService) { \n    \n  }\n\n  ngOnInit(): void {\n    const user = JSON.parse(localStorage.getItem('user') as string) as firebase.default.User;\n    this.userService.getById(user.uid).subscribe(data => {\n      this.user = data;\n      this.meterService.getMetersByUserId(this.user?.id as string).subscribe(meters =>{\n        this.meterInput = meters;\n      }, error => {\n        console.error(error);\n      });\n    }, error => {\n      console.error(error);\n    });\n    \n    this.chosenGasmeter = this.meterInput[0];\n    this.reload();\n  }\n\n  ngOnChanges() {\n    if (this.meterInput) {\n      this.chosenGasmeter = this.meterInput[0];\n      this.reload();\n    }\n  }\n  \n  reload() {\n    this.meterEmitter.emit(this.chosenGasmeter);\n  }\n\n}\n","<div class=\"meterList\">\n    <mat-form-field appearance=\"fill\">\n        <mat-select (selectionChange)=\"reload()\" [(ngModel)]=\"chosenGasmeter\">\n            <mat-option *ngFor=\"let obj of meterInput\" [value]=\"obj\">{{obj.name}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}