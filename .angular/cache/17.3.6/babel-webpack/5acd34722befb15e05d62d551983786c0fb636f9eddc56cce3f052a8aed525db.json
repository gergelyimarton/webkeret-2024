{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../shared/services/user.service\";\nimport * as i4 from \"../../shared/services/reading.service\";\nimport * as i5 from \"../../shared/services/meter.service\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"./list/list.component\";\nexport let MeterReadingComponent = /*#__PURE__*/(() => {\n  class MeterReadingComponent {\n    constructor(fb, router, userService, readingService, meterService) {\n      this.fb = fb;\n      this.router = router;\n      this.userService = userService;\n      this.readingService = readingService;\n      this.meterService = meterService;\n      this.readingForm = this.createForm({\n        id: '',\n        user_id: '',\n        date: 0,\n        reading: 0,\n        meter: ''\n      });\n    }\n    ngOnInit() {\n      const user = JSON.parse(localStorage.getItem('user'));\n      this.userService.getById(user.uid).subscribe(data => {\n        this.user = data;\n        this.readingForm.get('user_id')?.setValue(this.user?.id);\n      }, error => {\n        console.error(error);\n      });\n    }\n    getMeterName(meter) {\n      this.readingForm.get('meter')?.setValue(meter?.name);\n      this.meter_id = meter?.id;\n    }\n    createForm(model) {\n      let formGroup = this.fb.group(model);\n      formGroup.get('reading')?.addValidators([Validators.required]);\n      formGroup.get('meter')?.addValidators([Validators.required]);\n      return formGroup;\n    }\n    addReading() {\n      if (this.readingForm.valid) {\n        if (this.readingForm.get('reading') && this.readingForm.get('meter')) {\n          this.readingForm.get('date')?.setValue(new Date().getTime());\n          this.meterService.updateCurrent(this.meter_id, this.update_current);\n          this.readingService.create(this.readingForm.value).then(_ => {\n            this.router.navigateByUrl('/main');\n          }).catch(error => {\n            console.error(error);\n          });\n        }\n      }\n    }\n    static #_ = this.ɵfac = function MeterReadingComponent_Factory(t) {\n      return new (t || MeterReadingComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.ReadingService), i0.ɵɵdirectiveInject(i5.MeterService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MeterReadingComponent,\n      selectors: [[\"app-meter-reading\"]],\n      decls: 17,\n      vars: 2,\n      consts: [[\"fxLayout\", \"\", \"fxLayoutAlign\", \"center center\", 1, \"main_component\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"20px\", \"fxLayoutAlign\", \"center center\"], [3, \"meterEmitter\"], [1, \"div-flex\"], [3, \"ngSubmit\", \"formGroup\"], [\"for\", \"reading\"], [\"matInput\", \"\", \"type\", \"number\", \"formControlName\", \"reading\", 3, \"ngModelChange\", \"ngModel\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"type\", \"submit\"]],\n      template: function MeterReadingComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"mat-card-title\");\n          i0.ɵɵtext(4, \" \\u00D3ra\\u00E1ll\\u00E1s bedikt\\u00E1l\\u00E1sa \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"mat-card-content\")(6, \"meter-list\", 2);\n          i0.ɵɵlistener(\"meterEmitter\", function MeterReadingComponent_Template_meter_list_meterEmitter_6_listener($event) {\n            return ctx.getMeterName($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"mat-card-actions\", 3)(8, \"form\", 4);\n          i0.ɵɵlistener(\"ngSubmit\", function MeterReadingComponent_Template_form_ngSubmit_8_listener() {\n            return ctx.addReading();\n          });\n          i0.ɵɵelementStart(9, \"div\")(10, \"mat-form-field\")(11, \"mat-label\", 5);\n          i0.ɵɵtext(12, \"V\\u00EDz\\u00F3ra \\u00E1ll\\u00E1s: \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"input\", 6);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function MeterReadingComponent_Template_input_ngModelChange_13_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.update_current, $event) || (ctx.update_current = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(14, \"div\")(15, \"button\", 7);\n          i0.ɵɵtext(16, \"Bedikt\\u00E1l\\u00E1s\");\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"formGroup\", ctx.readingForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.update_current);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.MatFormField, i6.MatLabel, i7.MatCard, i7.MatCardActions, i7.MatCardContent, i7.MatCardHeader, i7.MatCardTitle, i8.MatInput, i9.MatButton, i10.ListComponent],\n      styles: [\".div-card[_ngcontent-%COMP%]{padding:50px}.main_component[_ngcontent-%COMP%]{height:100vh;align-items:center}mat-card[_ngcontent-%COMP%]{width:80%;height:80%}mat-card-header[_ngcontent-%COMP%]{display:initial}mat-card-actions[_ngcontent-%COMP%]{width:80%}mat-form-field[_ngcontent-%COMP%]{width:80%}.div-flex[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;text-align:center}\"]\n    });\n  }\n  return MeterReadingComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}